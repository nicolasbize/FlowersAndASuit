using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static Dialog;

public class ConversationManager : MonoBehaviour
{
    [SerializeField] PlayerController player;
    [SerializeField] SpokenLine busyLine;
    [SerializeField] UIInventoryManager inventory;
    FloatingTextManager floatingTextManager;
    CutScenePlayer cutscenePlayer;
    Action onConversationCompleteCallback;
    Branch[] currentDialogBranches;
    Dialog currentDialog;

    private void Start() {
        floatingTextManager = GetComponent<FloatingTextManager>();
        cutscenePlayer = GetComponent<CutScenePlayer>();
    }

    public void ThinkOutLoud(SpokenLine thought, Action callback) {
        floatingTextManager.onEmptyQueue += OnConversationComplete;
        onConversationCompleteCallback = callback;
        if (thought.Text.Length > 0) {
            floatingTextManager.AddText(player.gameObject, thought, AudioUtils.DialogConversation.Enzo);
        } else {
            OnConversationComplete();
        }
    }

    public void TalkTo(Talkable talkable, Action callback) {
        if (talkable.Busy) {
            ThinkOutLoud(busyLine, callback);
        } else {
            AudioUtils.PlayMusic(talkable.music, 0.5f);
            // the queue needs to be self generated by the talkable object instead
            talkable.StartDialog((ConversationOutcome outcome) => {
                if (callback != null) {
                    callback();
                }
                if (outcome.ItemGained != null) {
                    inventory.AddToInventory(outcome.ItemGained);
                }
                if (outcome.CutScene != null) {
                    cutscenePlayer.PlayCutscene(outcome.CutScene);
                }
            });
        }
    }

    private void OnConversationComplete() {
        floatingTextManager.onEmptyQueue -= OnConversationComplete;
        if (onConversationCompleteCallback != null) {
            onConversationCompleteCallback();
            onConversationCompleteCallback = null;
        }
        AudioUtils.RestoreMainTrackOrVolume();
    }

}
